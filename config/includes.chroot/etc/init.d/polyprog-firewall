#!/bin/sh

### BEGIN INIT INFO
# Provides:          polyprog-firewall
# Required-Start:    $network $named
# Required-Stop:     $network $named
# Default-Start:     S
# Default-Stop:      
# Short-Description: Starts the PolyProg Firewall
# Description:       Starts the PolyProg Firewall. This ensures that
#                    contestants cannot access unauthorized websites.
### END INIT INFO

. /lib/lsb/init-functions

N=/etc/init.d/polyprog-firewall

wait_for_connectivity() {
    log_action_begin_msg "Waiting for network connectivity"
    local n_tries=0
    while ! host polyprog.epfl.ch >/dev/null 2>&1 && [ "$n_tries" -lt 2 ]; do
        n_tries=$((n_tries + 1))
        log_action_cont_msg " waiting ($n_tries / 3)"
        sleep 2
    done

    [ "$n_tries" -lt 2 ]
    local has_connectivity=$?
    log_action_end_msg $has_connectivity
    return $has_connectivity
}

setup_firewall() {
  # Flush all rules
  /sbin/iptables --flush
  /sbin/iptables --delete-chain

  # A chain to log and then reject packets
  /sbin/iptables --new-chain logreject
  /sbin/iptables --append logreject --jump LOG --log-prefix "polyprog-firewall: " --match limit --limit 20/minute
  /sbin/iptables --append logreject --jump REJECT

  # General policies: drop everything
  /sbin/iptables --policy INPUT DROP
  /sbin/iptables --policy FORWARD DROP
  /sbin/iptables --policy OUTPUT DROP

  # Accept related packets
  /sbin/iptables --append INPUT --match state --state ESTABLISHED,RELATED --jump ACCEPT 
  /sbin/iptables --append OUTPUT --match state --state ESTABLISHED,RELATED --jump ACCEPT 

  # Allow loopback
  /sbin/iptables --append INPUT --source 127.0.0.1/8 --destination 127.0.0.1/8 --jump ACCEPT 
  /sbin/iptables --append OUTPUT --source 127.0.0.1/8 --destination 127.0.0.1/8 --jump ACCEPT 

  # Allow DNS
  /sbin/iptables --append OUTPUT --protocol udp --dport domain --jump ACCEPT

  # Allow incoming ssh connections
  /sbin/iptables --append INPUT --protocol tcp --dport ssh --jump ACCEPT

  # Allow PING (outgoing replies are RELATED, hence accepted, too)
  /sbin/iptables --append INPUT --protocol icmp --icmp-type echo-request --jump ACCEPT

  # Allow HTTP to selected hosts
  for dest in \
      hc2.ch doc.hc2.ch polyprog.epfl.ch \
      mc.yandex.ru social.yandex.ru img.fotki.yandex.ru export.yandex.ru \
      contest.yandex.ru contest2.yandex.ru front.contest.yandex.net static.yandex.net \
      passport.yandex.com passport.yandex.ru awaps.yandex.ru \
      ajax.googleapis.com apis.google.com www.google-analytics.com ssl.google-analytics.com
  do
      /sbin/iptables --append OUTPUT --protocol tcp --destination $dest --dport http --jump ACCEPT
      /sbin/iptables --append OUTPUT --protocol tcp --destination $dest --dport https --jump ACCEPT
  done

  # All other outgoing packets are logged and rejected
  /sbin/iptables --append OUTPUT --jump logreject
}

stop_firewall() {
  # Flush all rules
  /sbin/iptables --flush
  /sbin/iptables --delete-chain

  # General policies: accept input and output
  /sbin/iptables --policy INPUT ACCEPT
  /sbin/iptables --policy FORWARD DROP
  /sbin/iptables --policy OUTPUT ACCEPT
}

case "$1" in
  start)
        if wait_for_connectivity; then
            log_action_begin_msg "Setting up PolyProg Firewall"
            setup_firewall
            log_action_end_msg $?
        else
            log_warning_msg "Cannot connect to the network. Not setting up PolyProg Firewall."
            log_warning_msg "Please contact PolyProg staff."
            stop_firewall
            exit 1
        fi
        ;;
  stop)
        log_action_begin_msg "Stopping PolyProg Firewall"
        stop_firewall
        log_action_end_msg $?
        ;;
  reload|restart|force-reload)
        log_action_begin_msg "Restarting PolyProg Firewall"
        stop_firewall
        setup_firewall
        log_action_end_msg $?
        ;;
  *)
        echo "Usage: $N start|stop" >&2
        exit 1
        ;;
esac

exit 0
