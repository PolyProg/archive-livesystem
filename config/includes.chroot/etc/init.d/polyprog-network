#!/bin/bash

### BEGIN INIT INFO
# Provides:          polyprog-network
# Required-Start:    $network $named
# Required-Stop:     $network $named
# Default-Start:     S
# Default-Stop:      
# Short-Description: Connects to the network using 802.1x authentication
# Description:       Connects to the network. Authenticates using 802.1x.
### END INIT INFO

. /lib/lsb/init-functions

N=/etc/init.d/polyprog-network

start_network() {
    sleep 2
    echo; echo;
    echo "I will now attempt to connect to the EPFL network."
    echo "Please enter a GASPAR username and the corresponding password."
    echo "This password will not be permanently stored; it will only"
    echo "be used to obtain network connectivity."
    echo
    echo "If you don't have a GASPAR username, please ask the PolyProg"
    echo "staff for help."
    echo
    echo "To continue without connecting to the EPFL network, enter an"
    echo "empty username."
    echo
    local have_password=0
    if read -p "GASPAR username:" -t 300 gaspar_username; then
        if [ -n "$gaspar_username" ]; then
            read -p "password:" -s gaspar_password

            sed -i -e "s/%GASPAR_USERNAME%/$gaspar_username/" /etc/wpa_supplicant/wpa_supplicant.conf
            sed -i -e "s/%GASPAR_PASSWORD%/$gaspar_password/" /etc/wpa_supplicant/wpa_supplicant.conf
            have_password=1
        fi
    fi

    local status=1
    if [ "$have_password" -eq "1" ]; then
        wpa_supplicant -D wired -i eth0 -c /etc/wpa_supplicant/wpa_supplicant.conf -B
        sleep 2
        dhclient eth0
        status=$?
    else
        echo "Not connecting to the EPFL network."
    fi

    return $status
}

stop_network() {
    dhclient -r eth0
    killall wpa_supplicant
}

case "$1" in
  start)
        start_network
        local status=$?
        log_action_begin_msg "Connecting to the network"
        log_action_end_msg $status
        ;;
  stop)
        log_action_begin_msg "Disconnecting from the network"
        stop_network
        log_action_end_msg $?
        ;;
  reload|restart|force-reload)
        log_action_begin_msg "Re-connecting to the network"
        stop_network
        start_network
        log_action_end_msg $?
        ;;
  *)
        echo "Usage: $N start|stop" >&2
        exit 1
        ;;
esac

exit 0
